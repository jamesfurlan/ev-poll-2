{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["EditForm","props","state","open","handleClose","_handleClose","bind","handleClickOpen","_handleOpen","handleChange","handleSubmit","this","setState","value","Message","event","self","preventDefault","formData","FormData","set","Id","fetch","window","BACKEND_PORT","method","body","then","updatePolls","catch","err","console","log","target","className","Button","variant","id","startIcon","onClick","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","onSubmit","TextField","autoFocus","margin","label","type","defaultValue","onChange","fullWidth","DialogActions","color","React","Component","IndividualQuestion","handleLike","handleDismiss","handleResolution","resolvedClass","Resolved","ListItem","Likes","PollQuestions","mapMessages","messages","map","key","toString","content","upvotes","resolved","messagesEnd","scrollIntoView","behavior","scroll","serverResponse","json","postData","listItems","posts","data","scrollToBottom","a","componentDidMount","List","style","float","clear","ref","bottom","AskQuestion","Container","App","child","createRef","handleClearAll","current","Data","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebc6de99.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SendIcon from '@material-ui/icons/Send';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\n\n// TODO: add error pop-ups on catch statements for fetch\n\nclass EditForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { open: false };\n        this.handleClose = this._handleClose.bind(this);\n        this.handleClickOpen = this._handleOpen.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    _handleClose() {\n        this.setState({ open: false, value: this.props.Message });\n    }\n\n    _handleOpen() {\n        this.setState({ open: true, value: this.props.Message });\n    }\n\n    handleSubmit(event) {\n        const self = this;\n        event.preventDefault();\n        let formData = new FormData();\n        formData.set('id', self.props.Id);\n        formData.set('content', self.state.value);\n        fetch('http://localhost:'+window.BACKEND_PORT+'/edit', {\n            method: 'PUT',\n            body: formData\n        })\n        .then (\n            function() {\n                self.props.updatePolls();\n                self.setState({value: self.props.Message, open: false});\n            }\n        )\n        .catch (function(err) {\n            console.log('Fetch error: ' + err);\n        });\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    render() {\n        return (\n            <div className=\"buttonLine\">\n                <Button\n                    variant=\"contained\"\n                    id=\"editButton\"\n                    startIcon={<EditIcon />}\n                    onClick={this.handleClickOpen}\n                >\n                    edit\n                </Button>\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\" className=\"editbox\">Edit message</DialogTitle>\n                    <DialogContent>\n                    <form onSubmit={this.handleSubmit}>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"New message\"\n                            type=\"text\"\n                            defaultValue={this.props.Message}\n                            onChange={this.handleChange}\n                            fullWidth\n                        />\n                    </form>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={this.handleSubmit} color=\"primary\">\n                            Submit\n                        </Button>\n                    </DialogActions>\n                </DialogContent>\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nclass IndividualQuestion extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleLike = this.handleLike.bind(this);\n        this.handleDismiss = this.handleDismiss.bind(this);\n        this.handleResolution = this.handleResolution.bind(this);\n    }\n\n    handleLike() {\n        const self = this;\n        let formData = new FormData();\n        formData.set('id', self.props.Id);\n        fetch('http://localhost:'+window.BACKEND_PORT+'/like', {\n            method: 'POST',\n            body: formData\n        })\n        .then (\n            function() {\n                self.props.updatePolls();\n            }\n        )\n        .catch (function(err) {\n            console.log('Fetch error: ' + err);\n        });\n    }\n\n    handleDismiss() {\n        const self = this;\n        let formData = new FormData();\n        formData.set('id', self.props.Id);\n        fetch('http://localhost:'+window.BACKEND_PORT+'/dismiss', {\n            method: 'DELETE',\n            body: formData\n        })\n        .then (\n            function() {\n                self.props.updatePolls();\n            }\n        )\n        .catch (function(err) {\n            console.log('Fetch error: ' + err);\n        });\n    }\n\n    handleResolution() {\n        const self = this;\n        let formData = new FormData();\n        formData.set('id', self.props.Id);\n        fetch('http://localhost:'+window.BACKEND_PORT+'/resolve', {\n            method: 'POST',\n            body: formData\n        })\n        .then (\n            function() {\n                self.props.updatePolls();\n            }\n        )\n        .catch(function(err) {\n            console.log('Fetch error: '+ err);\n        });\n    }\n\n    render() {\n        const resolvedClass = `pollQuestion ${this.props.Resolved ? 'resolved' : ''}`;\n        return (\n            <ListItem className={resolvedClass}>\n                <div className=\"message\">\n                    {this.props.Message}\n                </div>\n                <div className=\"messagebuttons\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        startIcon={<ThumbUpIcon />}\n                        onClick={this.handleLike}\n                        className=\"buttonLine\"\n                    >\n                        like ({this.props.Likes})\n                    </Button>\n                    <EditForm\n                        Id={this.props.Id}\n                        Message={this.props.Message}\n                        updatePolls={this.props.updatePolls}\n                    />\n                    <Button\n                        variant=\"contained\"\n                        startIcon={this.props.Resolved ? <EmojiEmotionsIcon /> : <CheckIcon />}\n                        onClick={this.handleResolution}\n                        className=\"buttonLine\"\n                        id=\"resolveButton\"\n                    >\n                        {this.props.Resolved ? \"Resolved\" : \"Resolve\"}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        startIcon={<DeleteIcon />}\n                        onClick={this.handleDismiss}\n                        className=\"buttonLine\"\n                    >\n                        dismiss\n                    </Button>\n                </div>\n            </ListItem>\n        )\n    }\n}\n\nclass PollQuestions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updatePolls = this.updatePolls.bind(this);\n        this.mapMessages = this.mapMessages.bind(this);\n    }\n\n    mapMessages(messages) {\n        return messages.map((messages) =>\n            <IndividualQuestion\n                key={messages.id.toString()}\n                Id={messages.id}\n                Message={messages.content}\n                Likes={messages.upvotes}\n                updatePolls={this.updatePolls}\n                Resolved={messages.resolved}\n            />\n        );\n    }\n\n    scrollToBottom() {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    componentDidMount(scroll = 0) {\n        const self = this;\n        fetch('http://localhost:'+window.BACKEND_PORT+'/get', {\n            method: 'GET',\n        })\n        .then(\n            function(serverResponse) {\n                serverResponse.json().then(function(postData) {\n                    const listItems = self.mapMessages(postData.posts)\n                    self.setState({data: listItems})\n                    if (scroll) self.scrollToBottom();\n                }).catch(function(err) {console.log('Map error:', err)});\n            }\n        )\n        .catch(function(err) {\n            console.log('Fetch error: ' + err);\n        });\n    }\n\n    updatePolls(a = 0) {\n        this.componentDidMount(a);\n    }\n\n    render() {\n        return (\n            <List className=\"pollBox\" id=\"pollbox\">\n                {this.state && this.state.data}\n                <div style={{ float:\"left\", clear: \"both\" }}\n                    ref={(bottom) => { this.messagesEnd = bottom; }}>\n                </div>\n            </List>\n        );\n    }\n}\n\nclass AskQuestion extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {value: ''};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        const self = this;\n        event.preventDefault();\n        if (self.state.value === \"\") return;\n        let formData = new FormData();\n        formData.set('content', self.state.value);\n        fetch('http://localhost:'+window.BACKEND_PORT+'/post', {\n            method: 'POST',\n            body: formData\n        })\n        .then (\n            function() {\n                self.props.updatePolls(1);\n            }\n        )\n        .catch (function(err) {\n            console.log('Fetch error: ' + err);\n        });\n        self.setState({value: ''});\n    }\n\n    render() {\n        return (\n            <Container>\n                <form onSubmit={this.handleSubmit}>\n                    <TextField\n                        id=\"filled-helperText\"\n                        label=\"Question\"\n                        variant=\"filled\"\n                        value={this.state.value}\n                        onChange={this.handleChange}\n                    />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        startIcon={<SendIcon />}\n                        onClick={this.handleSubmit}\n                    >\n                        POST\n                    </Button>\n                </form>\n            </Container>\n        );\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updatePolls = this.updatePolls.bind(this);\n        this.child = React.createRef();\n        this.handleClearAll = this.handleClearAll.bind(this);\n    }\n\n    updatePolls(a = 0) {\n        this.child.current.updatePolls(a);\n    }\n\n    handleClearAll() {\n        const self = this;\n        fetch('http://localhost:'+window.BACKEND_PORT+'/clear', {\n            method: 'DELETE'\n        })\n        .then (\n            function() {\n                self.updatePolls();\n            }\n        )\n        .catch (function(err) {\n            console.log('Fetch error: ' + err)\n        })\n    }\n    render() {\n        return (\n            <Container>\n                <div className=\"header\">\n                    <div className=\"logo\">PollEV Mark II</div>\n                    <Button\n                        startIcon={<ClearAllIcon/>}\n                        color=\"secondary\"\n                        className=\"clearButton\"\n                        onClick={this.handleClearAll}\n                    >\n                        clear all\n                    </Button>\n                </div>\n                <PollQuestions Data={[]} ref={this.child}/>\n                <div className=\"separator\"/>\n                <AskQuestion updatePolls={this.updatePolls}/>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}